def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    else:
        fib_sequence = [0, 1]
        for i in range(2, n):
            next_fib = fib_sequence[-1] + fib_sequence[-2]
            fib_sequence.append(next_fib)
        return fib_sequence

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def word_count(text):
    words = text.split()
    return len(words)
def prime_factors(n):
    factors = []
    divisor = 2
    while n > 1:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    return factors

def calculate_factorial_iterative(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

def find_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def generate_fibonacci(n):
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_fib = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_fib)
    return fib_sequence

def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)
def convert_to_binary(n):
    return bin(n)[2:]

def convert_to_hexadecimal(n):
    return hex(n)[2:]

def convert_to_octal(n):
    return oct(n)[2:]

def calculate_area_of_circle(radius):
    return 3.14159 * radius ** 2

def calculate_perimeter_of_rectangle(length, width):
    return 2 * (length + width)
def find_lcm(a, b):
    gcd = find_gcd(a, b)
    return (a * b) // gcd

def count_words(text):
    words = text.split()
    return len(words)

def remove_duplicates(numbers):
    return list(set(numbers))

def remove_whitespace(text):
    return text.replace(" ", "")

def is_power_of_two(n):
    return n > 0 and (n & (n - 1)) == 0
def find_median(numbers):
    sorted_numbers = sorted(numbers)
    length = len(numbers)
    if length % 2 == 1:
        return sorted_numbers[length // 2]
    else:
        middle_indices = (length // 2) - 1, length // 2
        middle_numbers = [sorted_numbers[i] for i in middle_indices]
        return sum(middle_numbers) / 2

def calculate_percentage(part, total):
    return (part / total) * 100

def find_unique_characters(text):
    unique_chars = set(text)
    return "".join(unique_chars)

def calculate_exponential(base, exponent):
    return base ** exponent

def is_armstrong_number(n):
    digit_count = len(str(n))
    total = sum(int(digit) ** digit_count for digit in str(n))
    return total == n
def remove_punctuation(text):
    import string
    translator = str.maketrans("", "", string.punctuation)
    return text.translate(translator)

def find_mode(numbers):
    from collections import Counter
    counter = Counter(numbers)
    mode = counter.most_common(1)
    return mode[0][0]

def calculate_hypotenuse(a, b):
    return (a ** 2 + b ** 2) ** 0.5

def calculate_mean_squared_error(actual_values, predicted_values):
    n = len(actual_values)
    squared_errors = [(actual - predicted) ** 2 for actual, predicted in zip(actual_values, predicted_values)]
    mse = sum(squared_errors) / n
    return mse

def is_leap_year(year):
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def find_common_prefix(strings):
    if not strings:
        return ""
    common_prefix = strings[0]
    for string in strings:
        i = 0
        while i < len(common_prefix) and i < len(string) and common_prefix[i] == string[i]:
            i += 1
        common_prefix = common_prefix[:i]
    return common_prefix

def calculate_binomial_coefficient(n, k):
    from math import comb
    return comb(n, k)

def is_power_of_two(n):
    return n != 0 and (n & (n - 1)) == 0

def remove_whitespace(text):
    return "".join(text.split())

def find_mode(lst):
    from statistics import mode
    return mode(lst)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
def greet(name):
    return f"Hello, {name}!"

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def quadratic_formula(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return None
    else:
        x1 = (-b + discriminant**0.5) / (2*a)
        x2 = (-b - discriminant**0.5) / (2*a)
        return x1, x2
def reverse_string(s):
    return s[::-1]

def is_palindrome(s):
    s = s.lower().replace(" ", "")
    return s == s[::-1]

def calculate_average(numbers):
    if len(numbers) == 0:
        return None
    return sum(numbers) / len(numbers)

def find_maximum(numbers):
    if len(numbers) == 0:
        return None
    return max(numbers)

def find_minimum(numbers):
    if len(numbers) == 0:
        return None
    return min(numbers)
def calculate_square(x):
    return x * x

def calculate_cube(x):
    return x * x * x

def calculate_power(base, exponent):
    return base ** exponent

def calculate_factorial_recursive(n):
    if n == 0 or n == 1:
        return 1
    return n * calculate_factorial_recursive(n - 1)

def is_even(n):
    return n % 2 == 0
def find_average_length(words):
    total_length = sum(len(word) for word in words)
    return total_length / len(words)

def reverse_words_in_sentence(sentence):
    words = sentence.split()
    reversed_words = [word[::-1] for word in words]
    return " ".join(reversed_words)

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    return sum(1 for char in text if char in vowels)
def calculate_average(numbers):
    total = sum(numbers)
    count = len(numbers)
    return total / count

def find_max(numbers):
    max_number = numbers[0]
    for num in numbers:
        if num > max_number:
            max_number = num
    return max_number

def find_min(numbers):
    min_number = numbers[0]
    for num in numbers:
        if num < min_number:
            min_number = num
    return min_number

def calculate_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        next_num = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_num)
    return fib_sequence

def is_palindrome(word):
    return word == word[::-1]
def capitalize_words(text):
    words = text.split()
    capitalized_words = [word.capitalize() for word in words]
    return " ".join(capitalized_words)

def find_common_elements(list1, list2):
    return list(set(list1) & set(list2))

def calculate_gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def reverse_string(text):
    return text[::-1]

def calculate_square_root(n):
    return n ** 0.5
def calculate_factorial(n):
    if n == 0:
        return 1
    else:
        return n * calculate_factorial(n - 1)

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def count_vowels(text):
    vowels = "aeiouAEIOU"
    vowel_count = sum(1 for char in text if char in vowels)
    return vowel_count

def reverse_list(lst):
    return lst[::-1]

def calculate_average(nums):
    return sum(nums) / len(nums)
def find_longest_word(words):
    longest_word = ""
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return longest_word

def calculate_power(base, exponent):
    return base ** exponent

def remove_duplicates(lst):
    unique_lst = list(set(lst))
    return unique_lst

def is_even(number):
    return number % 2 == 0

def count_occurrences(lst, item):
    return lst.count(item)
